% Christopher Apfelbach


function Tessa()

%==========================================================================
    
    % CREATES MAIN GUI

        % Create GUI figure
        GUI = figure;

%==========================================================================
    
    % CREATES EMPTY GRAPHS

        % Heading: Bar Chart
        uicontrol('Parent', GUI, 'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.425 0.45 0.05], ...
            'String', 'Phonation Time at Each Voiced Frequency', ...
            'FontWeight', 'bold');

        % Axes: Bar Chart
        bar_graph = axes('Parent', GUI, ...
            'Units', 'normalized', ...
            'Position', [0.5 0.075 0.45 0.35]);

        % Heading: Box Plot
        uicontrol('Parent', GUI, 'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.5 0.90 0.45 0.05], ...
            'String', 'Median, Range, and Interquartile Frequencies', ...
            'FontWeight', 'bold');

        % Axes: Box Plot
        box_graph = axes('Parent', GUI, ...
            'Units', 'normalized', ...
            'Position', [0.5 0.55 0.45 0.35]);
        
        % Axes: links bar chart with box plot
        linkaxes([bar_graph, box_graph], 'x');

%==========================================================================
    
    % 1. DEFINE LOCATION OF 'PARTWISE.DTD'

        % Section Heading
        uicontrol('Parent', GUI, 'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.9 0.35 0.05], ...
            'String', '1. Define Location of ''Partwise.dtd''', ...
            'FontWeight', 'bold');

        % Button: Browse
        dtd_box = uicontrol('Parent', GUI, 'Style', 'pushbutton', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.85 0.35 0.05], ...
            'String', 'Browse', ...
            'Callback', @dtdbrowse);
        uicontrol('Parent', GUI, 'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.8 0.35 0.05], ...
            'String', 'Location of MusicXML partwise.dtd file');
        % Callback: @dtdbrowse
            function dtdbrowse(varargin)
            [file,path] = uigetfile( ...
               {'*.dtd',...
               'MusicXML Schema Files (*.dtd)'}, ...
               'Select a File', ...
               'partwise.dtd');
                if isequal(file, 0)
                    disp('User opted to cancel operation.')
                else
                    disp(['User selected: "', fullfile(path, file), '"']);
                    clipboard('copy', string(['"', fullfile(path, file), '"']));
                    disp('The above filepath has been copied to the clipboard.')
                    disp('Please replace "http://www.musicxml.org/dtds/partwise.dtd" in Line 2 of your .XML file with the copied filepath.')
                end
            end

%==========================================================================        

    % 2. CONVERT XML FILE TO MAT FILE

        % Section Heading
        uicontrol('Parent', GUI, 'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.7 0.35 0.05], ...
            'String', '2. Convert XML File to MAT File', ...
            'FontWeight', 'bold');
        
        % Text Box: 'Output name for converted MAT file'
        output_name_box = uicontrol('Parent', GUI, 'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.65 0.35 0.05], ...
            'Callback', @filename_callback);
        uicontrol('Parent', GUI, 'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.6 0.35 0.05], ...
            'String', 'Output name for converted MAT file');
        % Callback: @filename_callback
        output_filename = '';
            function filename_callback(varargin)
                output_filename = output_name_box.String;
            end

        % Button: 'Convert XML to MAT'
        import_data_button = uicontrol('Parent', GUI, 'Style', 'pushbutton', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.55 0.35 0.05], ...
            'String', 'Convert XML to MAT', ...
            'FontWeight', 'bold', ...
            'Callback', @import_callback);          
        % Callback: @import_callback; converts XML file to MAT file
        input_filename = '';
            function import_callback(varargin)
            [file,path] = uigetfile( ...
               {'*.xml',...
               'Uncompressed MusicXML files (*.xml)'}, ...
               'Select a File', ...
               'my_musicXML_score.xml');
                if isequal(file, 0)
                    disp('User opted to cancel operation.')
                else
                    disp(['User selected ', fullfile(path, file)]);
                    input_filename = fullfile(path, file);
                end
                importMXL(input_filename, ...
                          output_filename);          
            end

%==========================================================================        

    % 3. COMPILE DATA FROM MAT FILE

        % Section Heading
        uicontrol('Parent', GUI, 'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.425 0.35 0.05], ...
            'String', '3. Compile Data from MAT File', ...
            'FontWeight', 'bold');

        % Text Box: 'Part ID'
        part_id_box = uicontrol('Parent', GUI, 'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position',[0.05 0.375 0.15 0.05], ...
            'Callback', @part_id_callback);
        uicontrol('Parent', GUI, 'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.325 0.15 0.05], ...
            'String', 'Part ID (Ex.: P1, P2)');
        % Callback: @part_id_callback
        input_part_id = '';
            function part_id_callback(varargin)
                input_part_id = part_id_box.String;
            end
        
        % Text Box: 'Tempo in beats per minute'
        tempo_box = uicontrol('Parent', GUI, 'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [0.25 0.375 0.15 0.05], ...
            'Callback', @tempo_callback);
        uicontrol('Parent', GUI, 'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.25 0.325 0.15 0.05], ...
            'String', 'Tempo in beats per minute');
        % Callback: @tempo_callback
        input_tempo = 0;
            function tempo_callback(varargin)
                input_tempo = str2double(tempo_box.String);
            end
                
        % Button: 'Generate Stats from MAT'
        analyze_data_button = uicontrol('Parent', GUI, 'Style', 'pushbutton', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.275 0.35 0.05], ...
            'String', 'Compile Data from MAT File', ...
            'FontWeight', 'bold', ...
            'Callback', @analyze_callback); 
        % Callback: @analyze_callback; tabulates data from MAT file
        input_filename = '';
        output_filename = '';
            function analyze_callback(varargin)
            [file,path] = uigetfile( ...
               {'*.mat',...
               'MATLAB data files (*.mat)'}, ...
               'Select a File', ...
               'my_matlab_file.mat');
                if isequal(file, 0)
                    disp('User opted to cancel operation.')
                else
                    disp(['User selected ', fullfile(path, file)]);
                    input_filename = fullfile(path, file);
                    output_filename = fullfile(file);
                end
                analyzeMXL(input_filename, ...
                          output_filename, ...
                          input_tempo, ...
                          input_part_id);          
            end
        
%==========================================================================
    
    % 4. DISPLAY SUMMARY STATISTICS

        % Heading
        uicontrol('Parent', GUI, 'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.15 0.35 0.05], ...
            'String', '4. Display Summary Statistics', ...
            'FontWeight', 'bold');     
        
        % Button: 'Display Bar Graph of F0'
        histogram_button = uicontrol('Parent', GUI, 'Style', 'pushbutton', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.1 0.15 0.05], ...
            'String', 'Display Bar Graph of F0', ...
            'Callback', @bar_callback);
        % Callback: @bar_callback
        input_filename = '';
            function bar_callback(varargin)
            [file,path] = uigetfile( ...
               {'*.mat',...
               'MATLAB data files (*.mat)'}, ...
               'Select a File', ...
               'my_matlab_file.mat');
                if isequal(file, 0)
                    disp('User opted to cancel operation.')
                else
                    disp(['User selected ', fullfile(path, file)]);
                    input_filename = fullfile(file);
                end
                plotBar(bar_graph, input_filename);         
            end

        % Button: 'Display Box Plot of F0'
        box_plot_button = uicontrol('Parent', GUI, 'Style', 'pushbutton', ...
            'Units', 'normalized', ...
            'Position', [0.25 0.1 0.15 0.05], ...
            'String', 'Display Box Plot of F0', ...
            'Callback', @box_callback);
        % Callback: @box_callback
            input_filename = '';
            function box_callback(varargin)
            [file,path] = uigetfile( ...
               {'*.mat',...
               'MATLAB data files (*.mat)'}, ...
               'Select a File', ...
               'my_matlab_file.mat');
                if isequal(file, 0)
                    disp('User opted to cancel operation.')
                else
                    disp(['User selected ', fullfile(path, file)]);
                    input_filename = fullfile(file);
                end
                plotBox(box_graph, input_filename);         
            end

        % Button: 'Display Voicing Durations'
        pitch_arrays_button = uicontrol('Parent', GUI, 'Style', 'pushbutton', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.025 0.15 0.05], ...
            'String', 'Display Voicing Durations', ...
            'Callback', @array_callback);
        % Callback: @array_callback
            input_filename = '';
            function array_callback(varargin)
            [file,path] = uigetfile( ...
               {'*.mat',...
               'MATLAB data files (*.mat)'}, ...
               'Select a File', ...
               'my_matlab_file.mat');
                if isequal(file, 0)
                    disp('User opted to cancel operation.')
                else
                    disp(['User selected ', fullfile(path, file)]);
                    input_filename = fullfile(file);
                end
                voicingDuration(input_filename);
            end
        
        % Button: 'Display Summary Statistics'
        statistics_button = uicontrol('Parent', GUI, 'Style', 'pushbutton', ...
            'Units', 'normalized', ...
            'Position', [0.25 0.025 0.15 0.05], ...
            'String', 'Display Summary Statistics', ...
            'Callback', @stats_callback);
        % Callback: @stats_callback
            input_filename = '';
            function stats_callback(varargin)
            [file,path] = uigetfile( ...
               {'*.mat',...
               'MATLAB data files (*.mat)'}, ...
               'Select a File', ...
               'my_matlab_file.mat');
                if isequal(file, 0)
                    disp('User opted to cancel operation.')
                else
                    disp(['User selected ', fullfile(path, file)]);
                    input_filename = fullfile(file);
                end
                summaryStats(input_filename);
            end
        
end
